#!/usr/bin/fift -s
"TonUtil.fif" include
"GetOpt.fif" include

{ show-options-help 1 halt } : usage

true =: allow-bounce
false =: force-bounce
3 =: send-mode  // mode for SENDRAWMSG: +1 - sender pays fees, +2 - ignore errors
60 =: timeout   // external message expires in 60 seconds

begin-options
     " <filename-base> <subwallet-id> <seqno> <order-file> [-n|-b] [-t<timeout>] [<savefile>]" +cr +tab
    +"Creates a preprocessed request with up to 255 orders loaded from <order-file> to (sub)wallet, with private key loaded from file <filename-base>.pk "
    +"and address from <filename-base><subwallet-id>.addr, and send it to blockchain" +cr
    +"<order-file> is a text file with lines `SEND <dest-addr> <amount> <comment>`"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options

$# dup 4 < swap 5 > or ' usage if
5 :$1..n

$1 =: file-base
$2 parse-int =: subwallet_id   // parse subwallet-id
$3 parse-int =: seqno
$4 =: order-file
$5 "wallet-query" replace-if-null =: savefile
subwallet_id (.) 1 ' $+ does : +subwallet

file-base +subwallet +".addr" dup file-exists? { drop file-base +".addr" } ifnot
load-address
2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr
file-base +".pk" load-keypair nip constant wallet_pk

// b body -- b'
{ tuck <s 2dup 1 s-fits-with? not rot over 1 i, -rot
  { drop swap ref, } { s, nip } cond
} : append-msg-body
// ng wc addr bounce body -- c
{ <b b{01} s, rot 1 i, b{000100} s, 2swap addr, rot Gram,
  0 9 64 32 + + 1+ u, swap append-msg-body b>
} : create-int-msg
// ng wc addr bnc --
{ ."Transferring " 3 roll .GR ."to account "
  -rot 2dup 4 pick 7 + .Addr ." = " .addr ." bounce=" . cr
} : .transfer
// addr$ ng cmt -- c
{ -rot swap parse-smc-addr force-bounce or allow-bounce and  // cmt ng wc addr bnc
  2over 2over .transfer
  4 roll simple-transfer-body create-int-msg
} : create-simple-transfer

variable order#   order# 0!
// actions c -- c'
{ order# @ 255 >= abort"more than 255 orders"
  swap <b x{0ec3c86d} s, send-mode 8 u, swap ref, swap ref, b>
  order# 1+!
} : add-order-to-actions

// addr$ ng cmt --
{ create-simple-transfer add-order-to-actions } : send
{ bl word bl word $>GR 0 word send } : SEND

<b b> // empty actions

// parse order file
order-file include

// create external message
dup hashu wallet_pk ed25519_sign_uint
<b swap B, subwallet_id 32 u, now timeout + 32 u, seqno 32 u, swap ref, b>
dup ."signing message: " <s csr. cr
<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s, swap <s s, b>
dup ."resulting external message: " <s csr. cr

2 boc+>B
saveboc