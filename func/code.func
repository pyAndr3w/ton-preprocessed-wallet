;; Preprocessed wallet smart contract

() set_actions(cell c) impure asm "c5 POP";

() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

() recv_external(slice in_msg) impure {
  slice signature = in_msg~load_bits(512);
  (int subwallet_id, int valid_until, int msg_seqno) = (in_msg~load_uint(32), in_msg~load_uint(32), in_msg~load_uint(32));
  throw_if(35, valid_until <= now());
  slice ds = get_data().begin_parse();
  (int stored_seqno, int stored_subwallet, int public_key) = (ds~load_uint(32), ds~load_uint(32), ds.preload_uint(256));
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, subwallet_id == stored_subwallet);
  cell actions = in_msg.preload_ref();
  throw_unless(35, check_signature(cell_hash(actions), signature, public_key));
  accept_message();
  set_actions(actions);
  set_data(begin_cell()
    .store_uint(stored_seqno + 1, 32)
    .store_uint(stored_subwallet, 32)
    .store_uint(public_key, 256)
    .end_cell());
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int get_public_key() method_id {
  var cs = get_data().begin_parse();
  cs~skip_bits(64);
  return cs.preload_uint(256);
}